@namespace Masa.Tsc.Web.Admin.Rcl.Components.Apm
@inherits ApmComponentBase


<MDialog Value=Show ValueChanged="CloseAsync">
    <ChildContent>
        <div class="@($"slide {(Show ? "slide_in" : "slide_out")}")">
            <MCard>
                <MCardSubtitle Class="d-flex justify-end">
                    <SIcon OnClick="CloseAsync" Small Tooltip="@I18n.T("Close")">mdi-close</SIcon>
                </MCardSubtitle>
                <MCardText>
                    <div class="d-flex">
                        <SSearch BackgroundColor="white" @bind-Value="search" Class="rounded-2" Style="border:solid 1px;width:100%" />
                        @if (!string.IsNullOrEmpty(LinkUrl))
                        {
                            <SButton Class="white--text blue darken-1 ml-4 mr-2"
                                     Style="text-transform: none"
                                     BorderRadiusClass="rounded-lg"
                                     OnClick="OpenLogAsync">@I18n.Apm("Trace.Detail.SpanLog")</SButton>
                        }
                    </div>
                    <MSimpleTable Height="@("calc(100vh - 200px)")" FixedHeader>
                        <thead>
                            <tr>
                                <th class="text-left" width="15%">
                                    @I18n.Apm("Log.Dialog.Actions")
                                </th>
                                <th class="text-left" width="15%">
                                    @I18n.Apm("Log.Dialog.Field")
                                </th>
                                <th class="text-left">
                                    @I18n.Apm("Log.Dialog.Value")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @((RenderFragment)(dictRender => RenderTable(dictRender, _dic!)))
                        </tbody>
                    </MSimpleTable>
                </MCardText>
            </MCard>
        </div>
    </ChildContent>
</MDialog>

@code {

    private void RenderTable(RenderTreeBuilder __builder, IDictionary<string, object> dic, string? parent = null)
    {
        if (dic == null || !dic.Any())
            return;
        foreach (var key in dic.Keys)
        {
            var currentName = string.IsNullOrEmpty(parent) ? key : $"{parent}.{key}";

            var value = dic[key];
            if (IsFundamental(value.GetType()) || value.GetType().Equals(typeof(JsonElement)))
            {
                if (value is DateTime time)
                    value = time.UtcFormatLocal(CurrentTimeZone, "yyyy-MM-dd HH:mm:ss fff");

                var isShow = string.IsNullOrEmpty(search) || currentName.Contains(search, StringComparison.CurrentCultureIgnoreCase) || value.ToString()!.Contains(search);
                if (!isShow) continue;

                <tr>
                    <td></td>
                    <td>@currentName</td>
                    <td class="text-wrap">@value</td>
                </tr>
            }
            else if (value is IDictionary<string, object> dicValue)
            {
                RenderTable(__builder, dicValue, currentName);
            }
        }
    }

    private static bool IsFundamental(Type type)
    {
        return type.IsPrimitive || type.IsEnum || type.Equals(typeof(string)) || type.Equals(typeof(DateTime));
    }
}